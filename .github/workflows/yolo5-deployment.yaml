name: Yolo5 Microservice Deployment

on:
  push:
    paths:
      - 'yolo5/**'
    branches:
      - main

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo code
        uses: actions/checkout@v2

      - name: Build and push image
        run: |
          cd yolo5
          
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}

          YOLO5_IMAGE_NAME=yolo5:${{ github.run_number }}
          docker build -t $YOLO5_IMAGE_NAME .
          docker tag $YOLO5_IMAGE_NAME ${{ secrets.DOCKERHUB_USERNAME}}/$YOLO5_IMAGE_NAME
          docker push ${{ secrets.DOCKERHUB_USERNAME}}/$YOLO5_IMAGE_NAME      

  Deploy:
    runs-on: ubuntu-latest
    needs:
      - Build

    steps:
      - name: Checkout the repo code
        uses: actions/checkout@v2
      - name: Deploy new version
        run: |         
             sudo apt update && sudo apt install jq -y
            
            cd PolybotService/
            
            # Save telegram bot token in a secret file, to be used in docker-compose.yaml
            #echo "${{ secrets.TELEGRAM_BOT_TOKEN }}" > telegram_bot_token.secret
            
            # Get the ngrok current domain (you should assume ngrok is already running in the EC2)
            NGROK_DOMAIN=$(curl -s localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')
            
            # Generate .env file
            echo """
            MONGO_DB_VER=${{ secrets.MONGO_DB_VER }}
            BUCKET_NAME=${{ secrets.BUCKET_NAME }}
            POLYBOT_IMG_NAME=polybot:${{ github.run_number }}
            YOLO5_IMG_NAME=yolo5:${{ github.run_number }}            
            TELEGRAM_APP_URL=$NGROK_DOMAIN
            TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
            """ > .env
            
            
            # Take the service down
            docker compose down 
            
            # Take it up with the current updated values
            docker compose up -d    
     
